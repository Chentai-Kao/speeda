Log
========================================
10/25
  - convert MP4 to MP3
      $ ffmpeg -i xxx.mp4 -f mp3 -ab 192000 -vn xxx.mp3
  - convert MP4 to WAV
      $ ffmpeg -i xxx.mp4 xxx.wav
  - Sox has python binding (PySox), but cannot process signal frame-by-frame.

----- Decision: use "ffmpeg + scipy" to process WAV.

  - harma spectrogram -> use matplotlib (Matlab-like) (http://goo.gl/w86Lrh)
  - some useful MLT commands
      - melt [options] [producer [name=value]* ]+
        Options:
          -audio-track | -hide-video               Add an audio-only track
      - concatenate videos
        $ melt *.mp4 -consumer avformat:out.mp4 vcodec=libxvid
  - some search results of speed-up in MLT
    - the MLT speed-up plugin
      - plugin itself (http://goo.gl/rrr0YI)
      - email by author (not tested) (http://goo.gl/jlxFsK)
    - MLT Video Control Protocol doc, containing speed-up (http://goo.gl/oPjKlL)
    - MLT tutorial
      - MLT doc (http://goo.gl/zRv3JP)
      - MLT XML doc (http://goo.gl/NtYEbp)
      - some MLT notes on StackOverflow (http://goo.gl/uXJY3x)
      - MLT tutorial on Youtube (http://goo.gl/okcBmd)
  - seems easier to reverse-engineer Kdenlive render script
    - "script.sh" refers "script.sh.mlt" and can be run by bash
    - "script.sh.mlt" contains frame index and the "slowmotion" producer.
    - MLT XML doc might be helpful (above)
10/26
  - XML notes
    - only the following tags are needed
        <mlt>
          <producer>
          <playlist>
            <entry>
    - position of producers can be switched
    - specify speed ratio in "slowmotion" and "resource" (input file name)
        e.g.
          <producer in="0" out="2440" id="slowmotion:2:1.23">
            <property name="resource">Desktop/exp/short.mp4?1.23</property>
    - add audio to another playlist above the video playlist
  - it's OK to run script.sh without specifying pid
  - get properties of a video/audio (including number of frames) by
      $ melt short.mp4 -consumer xml
  - in kdenlive, get precise timestamp when cutting clips by Shift+R

----- Decision: a master python file that does all the things.
                  1. decide speed ratio => generate a list of segments + ratio
                  2. call 'sox' to generate audio segments
                  3. generate XML, BASH script
                  4. run BASH script

  - Start writing Harma
    - Use specgram for mode='magnitude' to get absolute value.
      - This requires upgrading matplotlib to 1.4.2 manually.
        (NOTE: the apt-get version of ubuntu is outdated)
    - Fixed 2 bugs in harma.
      - Normalize audio signal to [-1, 1] value range.
      - Turns out I missed two blocks of Harma code.
    - Now the detected syllables (Python v.s. Matlab) are identical.
    - TODO: Harma code needs refactoring.
10/27
  - Fixed 2 off-by-1 error in speeda.py.
10/28
  - Done with re-writing run.m. Identical to Matlab result.
10/29
  - Done with speeda.py
  - Done with generating audio clips by sox.
  - Change ratio to 2 decimals precision, highest precision supported by melt.
  - TODO: align Segment() timestamp with video frames.
          Generate audio and video afterwards.
10/30
  - Figured out how to add audio track. Need additional <playlist> and <tractor>
  - (DONE) TODO: Fix the bug on audio resource path.
10/31
  - Add <tractor>, fix some bugs. Now generate correct XML that renders!
  - Linux freezes when rendering. Don't know the cause.
    Call bash outside Python seems better (temporarily).
  - Test on 'math.mp4'. The effect is not good, finding out why...
11/1
  - On quieter part, syllable detection is not effective.
    (TODO) Possible solution: adjust 'minDB' according to audio volume.
  - Tweaking Harma parameters. After several trials, seems the original setting
    (nfft=256, overlap=128, minDB=20) works the best.
  - Try several videos:
    - economics:
      - speaker speaks at almost the same rate, Speeda not too helpful
    - math:
      - "interview" too quiet, few syllables detected, so it becomes too fast.
    - haptics:
      - good, with variation of speaking rate.
      - There's a frame glitch (~0:07), caused by kdenlive when ".mov -> .mp4"
  - The reason of freezing when rendering is OUT-OF-MEMORY!!!
    If the film is lengthy, then it just takes up all memory and freeze.
    Probably too many kinds of <producer> (with various speed ratio).
    (TODO) Solution:
      - Maybe AWS has larger memory?
      - Reduce the number of speedup rate to some fixed level,
        like 0.25, 0.5, 0.75, etc. Not allowing free ratio like 2.62.
      - Create shorter clips for <producer> so it's not full length.
11/29
  - Tried deploying to EC2. Encountered some problems installing kdenlive.
    - Upgrade to Ubuntu 14.04.
    - Run kdenlive build script.
    - Upgrade ffmpeg.
    - Still "render aborted..." when rendering, finding out why.
    - Since EC2 only has 4 GB, "top" shows that all the memory is used.
      This is WHY IT'S ABORTED!!! (I guess)
      Solution:
      - request 8GB memory to test this hypothesis
      - use shorter clip of producer (the previous TODO)

1/6
  - Try to answer the question "is it possible to load shorter clip of producer"
    - Answer: no. (see exp/scripts/ai_short_2x.sh.mlt).
    - I cannot figure out how the resulted video is produced.
  - Conclusion: maybe it's time to quantize speedup ratio?
  - Done with quantizing speedup ratio to be multiple of 0.25.
    - the output seems alright, no perceivable difference.
    - some results on ai_short.mp4 (2 min):
      - in .mlt, the number of <producer> reduces from 199 to 136. Good.
      - when rendering on my laptop, memory usage reduces from 100% (freeze!)
        to 18% (finish rendering).
      - on EC2, the rendering still takes 100% memory (fail rendering).

1/7
  - Add docstring.
  - Try to find the best parameter for Harma.
    - Wrote a function exp_harma() for this, test on "20_sec_ai_short.wav".
    - Plots are saved in plots/ai_short/*
    - Seems the original setting (NFFT=256, minDB=20, noverlap=128) works best.
    - Finding: sometimes multiple short syllables are detected as a long one.














Note for porting to AWS machine
========================================
- make sure matplotlib is updated (1.4.2). The apt-get version is out-dated.
  Need to build and install from source.
